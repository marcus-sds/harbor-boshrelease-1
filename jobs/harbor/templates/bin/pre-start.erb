#!/usr/bin/env bash

set -e # exit immediately if a simple command exits with a non-zero status

[ -z "${DEBUG:-}" ] || set -x

source /var/vcap/packages/common/utils.sh

PACKAGE_DIR=/var/vcap/packages
JOB_NAME=harbor
HARBOR_JOB_DIR=/var/vcap/jobs/$JOB_NAME
HARBOR_PACKAGE_DIR=${PACKAGE_DIR}/harbor-app
HARBOR_PERSISTED_DATA=/var/vcap/store/$JOB_NAME
HARBOR_IMAGES_TAR_PATH=${HARBOR_PACKAGE_DIR}/harbor*.tar
HARBOR_DATA=/data
HARBOR_DB_BACKUP_DIR=$HARBOR_DATA/db_backup
HARBOR_VERSION_FILE=$HARBOR_DATA/harbor_version
CFG_FILE=${HARBOR_JOB_DIR}/config/harbor.cfg
CRON_PATH=/etc/cron.d/$JOB_NAME
CERTS_D=/etc/docker/certs.d

source $PACKAGE_DIR/harbor-common/common.sh
source $HARBOR_JOB_DIR/bin/properties.sh

log "Installing Harbor $HARBOR_FULL_VERSION"

#Make sure folders are ready
for dir in $HARBOR_PERSISTED_DATA ; do
  mkdir -p ${dir}
  chown vcap:vcap ${dir}
  chmod 755 ${dir}
done

#Link Harbor Data dir to Bosh Persistent Disk
#See https://bosh.io/docs/persistent-disks.html
ln -sfT $HARBOR_PERSISTED_DATA $HARBOR_DATA

if [ ! -f $HARBOR_VERSION_FILE ]; then
  touch $HARBOR_VERSION_FILE
fi
INSTALLED_HARBOR_VERSION=`cat $HARBOR_VERSION_FILE`

<%- if p("populate_etc_hosts") %>
#Populate /etc/hosts
fqdn=<%= p("hostname") %>
ip=<%= spec.ip %>
sed -i -e "/$ip/d" /etc/hosts
<%-   if spec.ip != p("hostname") %>
sed -i -e "/$fqdn/d" /etc/hosts
echo "$ip $fqdn" >> /etc/hosts
<%-   end %>
<%- end %>

if [ "$HARBOR_PROTOCOL" = "https" ]; then
  #Copy cert to the right place
  mkdir -p $HARBOR_DATA/cert
  mkdir -p $HARBOR_DATA/ca_download

  cp ${HARBOR_JOB_DIR}/config/server.crt $HARBOR_DATA/cert/
  cp ${HARBOR_JOB_DIR}/config/server.key $HARBOR_DATA/cert/
  cp ${HARBOR_JOB_DIR}/config/uaa_ca.crt $HARBOR_DATA/cert/
  cp ${HARBOR_JOB_DIR}/config/ca.crt $HARBOR_DATA/ca_download

  #For status checking script usage
  CERT_PATH=$CERTS_D/${HARBOR_HOSTNAME}
  mkdir -p $CERT_PATH
  chown vcap:vcap ${CERT_PATH}
  chmod 755 ${CERT_PATH}
  cp $HARBOR_DATA/ca_download/ca.crt ${CERT_PATH}
fi

#Prepare Harbor env
PREPARE_OPTS="--conf ${CFG_FILE}"

#If install optional component Notary
if [ -n "$WITH_NOTARY" ]; then
  PREPARE_OPTS="${PREPARE_OPTS} --with-notary"
fi

#If install optional component Clair
if [ -n "$WITH_CLAIR" ]; then
  PREPARE_OPTS="${PREPARE_OPTS} --with-clair"
fi

${HARBOR_PACKAGE_DIR}/prepare ${PREPARE_OPTS}

if [ ! -z "$(cat ${HARBOR_JOB_DIR}/config/gcs_keyfile)" ]; then
  log 'Generate GCS keyfile'
  cp ${HARBOR_JOB_DIR}/config/gcs_keyfile ${HARBOR_PACKAGE_DIR}/common/config/registry/
fi

checkHarborVersion() {
  if [ -z "$INSTALLED_HARBOR_VERSION" ]; then
     if $DOCKER_CMD images | grep vmware/harbor-log | grep -q v1.4.0 ; then
       # Harbor Tile 1.4.x was installedwhich does not write the HARBOR_VERSION_FILE.
       echo 1
     else
       # Harbor was not installed on this machine before.
       echo 2
     fi
  else
    compareVersion $HARBOR_FULL_VERSION $INSTALLED_HARBOR_VERSION
  fi
}

#Load Harbor images
loadImages() {
  result=$(checkHarborVersion)
  if [ $result -le 0 ]; then
    # No need to load the same images twice or images of lower version.
    return
  fi
  waitForDockerd
  #TODO(szou): Add image cleaning here if do migration
  #Load images
  log "Loading docker images ..."
  $DOCKER_CMD load -i $HARBOR_IMAGES_TAR_PATH 2>&1
}

#Upgrade Harbor if higher version of Harbor to be installed
upgradeHarbor() {
  result=$(checkHarborVersion)
  case $result in
    -1)
      log "Can not upgrade Harbor from $INSTALLED_HARBOR_VERSION to $HARBOR_FULL_VERSION. Aborted."
      exit 1
      ;;
    1)
      log "Upgrading Harbor $INSTALLED_HARBOR_VERSION to $HARBOR_FULL_VERSION ..."
      ;;
    2)
      # Harbor is not installed before. No need to upgrade.
      return
      ;;
    0)
      # Already installed. No need to upgrade.
      return
      ;;
  esac

  HARBOR_MIGRATOR_TAG=$($DOCKER_CMD images | grep harbor-migrator | grep $HARBOR_FULL_VERSION | awk '{print $2}')
  log "Use harbor-migrator:$HARBOR_MIGRATOR_TAG for migration"
  log "Backing up Harbor database"
  $DOCKER_CMD run -i --rm -e DB_USR=root -e DB_PWD=$HARBOR_DB_PWD -e SKIP_CONFIRM=y -v /data/database:/var/lib/mysql -v $HARBOR_DB_BACKUP_DIR:/harbor-migration/backup vmware/harbor-migrator:$HARBOR_MIGRATOR_TAG --db backup
  log "Migrating Harbor database"
  $DOCKER_CMD run -i --rm -e DB_USR=root -e DB_PWD=$HARBOR_DB_PWD -e SKIP_CONFIRM=y -v /data/database:/var/lib/mysql vmware/harbor-migrator:$HARBOR_MIGRATOR_TAG --db up
}

#Start docker daemon
/var/vcap/jobs/docker/bin/ctl start

loadImages
<%- if p("enable_upgrade") -%>
upgradeHarbor
<%- end -%>

#Wait for bosh dns service. uaa.sh depends on it to resolve PKS/PAS UAA FQDN.
/var/vcap/jobs/bosh-dns/bin/wait

#If auth mode is 'uaa_auth' and admin client existing, try to register UAA client for Harbor registry
if [ $AUTH_MODE = 'uaa_auth' ] && [[ ! -z "${UAA_ADMIN// }" ]]; then
  source $HARBOR_JOB_DIR/bin/uaa.sh
  register_harbor_uaa_client
fi

#Save installed harbor version to file
echo $HARBOR_FULL_VERSION > $HARBOR_VERSION_FILE

<%- if p("enable_externalssl") -%>
################# copy nginx.conf file
cp ${HARBOR_JOB_DIR}/config/nginx.conf ${HARBOR_PACKAGE_DIR}/common/config/nginx/nginx.conf
#################
<%- end -%>


log "Successfully done!"
exit 0
